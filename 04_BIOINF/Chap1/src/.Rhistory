# OPTIMIZACION BASICA
x = c(0.91, 0.90, 0.89, 0.86, 0.78, 0.32, 0.32, 0.28, 0.25, 0.23)
y = c(17.4, 14.0, 30.0, 0.26, 26.0, 0.18, 3.40, 0.90, 2.50, 0.00)
xy = c() # x - y
x2 = c() # x**2
n = length(x)
for (index in 1:n) {
xy = c(xy, x[index] * y[index])
x2 = c(x2, x[index]^2)
}
a = ((n*sum(xy))-(sum(y)*sum(x)))/((n*sum(x2))-(sum(x)^2))
b = ((sum(y)*sum(x2))-(sum(x)*sum(xy)))/((n*sum(x2))-(sum(x)^2))
result = c()
for (index in 1:n) {
result = c(result, a*x[index] + b)
}
plot(x, y, ylim=c(-10,30), col="red")
par(new=TRUE)
plot(x, result, ylim=c(-10,30), col="blue")
install.packages('igraph')
knitr::opts_chunk$set(echo = TRUE)
libray(igraph)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
g <- graph(c(1,2))
plot(g, vertex.color='green', vertex.size=40, edge.color='red)
g <- graph(c(1,2))
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
g <- graph(c(1,2,2,3,3,4,41))
g <- graph(c(1,2,2,3,3,4,4,1))
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE)
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE, N=7)
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE, n=7)
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE, n=7)
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
print(g[])
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE, n=7)
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
print(g[])
graph(c('amy', 'ram', 'ram', 'li', 'li', 'amy',  'amy', 'li', 'kate', 'li'))
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE, n=7)
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
print(g[])
g1 <- graph(c('amy', 'ram', 'ram', 'li', 'li', 'amy',  'amy', 'li', 'kate', 'li'))
plot(g1)
g <- graph(c(1,2,2,3,3,4,4,1), directed = FALSE, n=7)
plot(g,
vertex.color='green',
vertex.size=40,
edge.color='red')
print(g[])
g1 <- graph(c('amy', 'ram', 'ram', 'li', 'li', 'amy',  'amy', 'li', 'kate', 'li'))
plot(g1, vertex.color='green',
vertex.size=40,
edge.color='red')
print(g1[])
degree(g1)
degree(g1, model='all')
degree(g1, mode='all')
degree(g1, mode='in')
degree(g1, mode='out')
degree(g1, mode='all')
degree(g1, mode='in')
degree(g1, mode='out')
# ---
diameter(g1, directed = FALSE, weights = NA)
degree(g1, mode='all')
degree(g1, mode='in')
degree(g1, mode='out')
# ---
diameter(g1, directed = FALSE, weights = NA)
edge_density(g1, loops = FALSE)
degree(g1, mode='all')
degree(g1, mode='in')
degree(g1, mode='out')
# ---
diameter(g1, directed = FALSE, weights = NA)
edge_density(g1, loops = FALSE)
ecount(g1)/(vcount(g1)*(vcount(g1)-1))
degree(g1, mode='all')
degree(g1, mode='in')
degree(g1, mode='out')
# ---
diameter(g1, directed = FALSE, weights = NA)
edge_density(g1, loops = FALSE)
ecount(g1)/(vcount(g1)*(vcount(g1)-1))
reciprocity(g1)
degree(g1, mode='all')
degree(g1, mode='in')
degree(g1, mode='out')
# ---
diameter(g1, directed = FALSE, weights = NA)
edge_density(g1, loops = FALSE)
ecount(g1)/(vcount(g1)*(vcount(g1)-1))
reciprocity(g1)
closeness(g1, mode = 'all', weights = NA)
library('rmeta')
install.packages('rmeta')
source("http://bioconductor.org/biocLite.R")
install.packages('seqinr')
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Projects/MCPI_SEM-2/04_BIOINF/Chap1/src")
knitr::opts_chunk$set(echo = TRUE)
library("seqinr")
setwd("~/Projects/MCPI_SEM-2/04_BIOINF/Chap1/src")
dengue <- read.fasta(file='../data/sequence.fasta')
dengueseq <- dengue[[1]] # dataset into a vector
length(dengueseq)
table(dengueseq)
gc_content <- function(db) {
table(db)
gen <- table(db)
c <- gen[1, 'c']
g <- gen[1, 'g']
return(( (g + c)*100)/length(db) )
}
gc_content(dengueseq)
gc_content <- function(db) {
gen <- table(db)as.data.frame.matrix(table(db))
gc_content <- function(db) {
gen <- as.data.frame.matrix(table(db))
c <- gen[1, 'c']
g <- gen[1, 'g']
return(( (g + c)*100)/length(db) )
}
gc_content(dengueseq)
gc_content <- function(db) {
gen <- as.data.frame.matrix(table(db))
#c <- gen[1, 'c']
#g <- gen[1, 'g']
#return(( (g + c)*100)/length(db) )
return(1)
}
gc_content(dengueseq)
gc_content <- function(db) {
gen <- as.data.frame(table(db))
#c <- gen[1, 'c']
#g <- gen[1, 'g']
#return(( (g + c)*100)/length(db) )
return(1)
}
gc_content(dengueseq)
gc_content(dengueseq)
gc_content <- function(db) {
gen <- as.data.frame(table(db))
gen$
#c <- gen[1, 'c']
#g <- gen[1, 'g']
#return(( (g + c)*100)/length(db) )
return(1)
}
gen <- as.data.frame(table(db))
gc_content <- function(db) {
gen <- as.data.frame(table(db))
gen$
#c <- gen[1, 'c']
#g <- gen[1, 'g']
#return(( (g + c)*100)/length(db) )
return(1)
}
gen <- as.data.frame(table(dengueseq))
gc_content(dengueseq)
gc_content <- function(db) {
gen <- as.data.frame(table(db))
gen$
#c <- gen[1, 'c']
#g <- gen[1, 'g']
#return(( (g + c)*100)/length(db) )
return(1)
}
gen <- as.data.frame.matrix(table(dengueseq))
GC(dengueseq)
GC(dengueseq)*100
